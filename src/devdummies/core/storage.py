from __future__ import annotations
from typing import Protocol, Any

class KeyValue(Protocol):
    def get(self, key: str, default: Any | None = None) -> Any | None: ...
    def set(self, key: str, value: Any) -> None: ...
    def delete(self, key: str) -> None: ...
    def keys(self, prefix: str = "") -> list[str]: ...

class BlobStorage(Protocol):
    def put(self, key: str, data: bytes) -> None: ...
    def get(self, key: str) -> bytes: ...
    def delete(self, key: str) -> None: ...
    def exists(self, key: str) -> bool: ...
    def list(self, prefix: str = "") -> list[str]: ...

class Queue(Protocol):
    def push(self, item: Any) -> None: ...
    def pop(self) -> Any | None: ...
    def size(self) -> int: ...
    def clear(self) -> None: ...
